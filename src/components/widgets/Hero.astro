---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
	title = await Astro.slots.render('title'),
	subtitle = await Astro.slots.render('subtitle'),
	tagline,

	content = await Astro.slots.render('content'),
	actions = await Astro.slots.render('actions'),
	image = await Astro.slots.render('image'),

	id,
	bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class='relative md:-mt-[76px] not-prose' {...id ? { id } : {}}>
	<div class='absolute inset-0 pointer-events-none' aria-hidden='true'>
		<slot name='bg'>
			{bg ? <Fragment set:html={bg} /> : null}
		</slot>
	</div>

	<div
		class='relative max-w-7xl mx-auto px-4 sm:px-6 h-screen bg-cover bg-center flex items-center'
		style={`background-image: url('${image?.src}'); filter: brightness(0.972) grayscale(20%);`}
	>
		<div class='text-center max-w-5xl mx-auto'>
			{
				tagline && (
					<p
						class='text-base text-secondary dark:text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'
						set:html={tagline}
					/>
				)
			}

			{
				title && (
					<h1
						class='text-5xl md:text-6xl font-bold leading-tighter tracking-tighter mb-4 font-heading text-white dark:text-gray-200 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade uppercase max-w-lg mx-auto'
						set:html={title}
					/>
				)
			}

			{
				subtitle && (
					<p
						class='text-xl text-muted mb-6 dark:text-slate-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'
						set:html={subtitle}
					/>
				)
			}

			{
				actions && (
					<div class='max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade'>
						{Array.isArray(actions) ? (
							actions.map((action) => (
								<div class='flex w-full sm:w-auto'>
									<Button
										{...(action || {})}
										class='w-full sm:mb-0'
									/>
								</div>
							))
						) : (
							<Fragment set:html={actions} />
						)}
					</div>
				)
			}

			{content && <Fragment set:html={content} />}
		</div>
	</div>
</section>
